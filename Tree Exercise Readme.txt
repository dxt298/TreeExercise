-Description of how the script works
	The script is made up of three main parts: a Node struct, and two methods, one for generating the tree, and one for writing/printing the tree.
	The node knows about the following: its own value, the level it resides in, its parent, and its two children.
	Written in C++, compilation can be done via Visual Studio, and the program works via command line arguments ("Tree.exe numberforlevels"). The program takes in the argument for the amount of levels made, and then generates the tree. 
	Generation Logic	
		The method itself has two index to take care of, the total amount of levels the tree will be, and the current index in the recursive loop that we are on.  A temporary vector of Nodes is made so that this vector can be passed into the generation method again recursively.  The reason for an entire vector of nodes to be passed in is so that an entire level's children can be generated at once, rather than going down into the left child, generating children, back up then into the right child, generating children, and possibly up a few more and down a few more to continue generating children on the other side of the tree. Another reason for using the vector/list is for simplicity of calculating the values.  Values are simply the parent's value added to the value of the left or right neighbor of that parents depending on whether or not it's the left or right child.  In this case, the parent's neighbors are simply the items before and after it in the vector.  Children are made, added to the temporary vector, then the method is called recursively to start again for the next level.
	Printing Logic
		The printing logic follows the same logic as the generation logic, but rather than creating nodes it simply goes through the tree and prints out the nodes at the level it is at.  The amount of spaces was an arbitrarily decided number that I chose that seemed to look good when generating a four level tree.  Problems arise when printing out more complex trees because double digits take up more space, but that's another problem.